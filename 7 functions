"""Задание 7.1
Создать функцию, которая генерирует конфигурацию для access-портов.
Параметр access ожидает, как аргумент, словарь access-портов, вида:
{'FastEthernet0/12':10,
 'FastEthernet0/14':11,
 'FastEthernet0/16':17,
 'FastEthernet0/17':150}
Функция должна возвращать список всех портов в режиме access с конфигурацией на основе шаблона access_template.
В конце строк в списке не должно быть символа перевода строки.
Пример итогового списка:
[
'interface FastEthernet0/12',
'switchport mode access',
'switchport access vlan 10',
'switchport nonegotiate',
'spanning-tree portfast',
'spanning-tree bpduguard enable',
'interface FastEthernet0/17',
'switchport mode access',
'switchport access vlan 150',
'switchport nonegotiate',
'spanning-tree portfast',
'spanning-tree bpduguard enable',
...]
Проверить работу функции на примере словаря access_dict.
def generate_access_config(access):
    access - словарь access-портов,
    для которых необходимо сгенерировать конфигурацию, вида:
        { 'FastEthernet0/12':10,
          'FastEthernet0/14':11,
          'FastEthernet0/16':17}
    Возвращает список всех портов в режиме access с конфигурацией на основе шаблона
    access_template = ['switchport mode access',
                       'switchport access vlan',
                       'switchport nonegotiate',
                       'spanning-tree portfast',
                       'spanning-tree bpduguard enable']
access_dict = { 'FastEthernet0/12':10,
                'FastEthernet0/14':11,
                'FastEthernet0/16':17,
                'FastEthernet0/17':150 }
"""

#Создаем словарь с аргументами            
access_dict = { 'FastEthernet0/12':10,
                'FastEthernet0/14':11,
                'FastEthernet0/16':17,
                'FastEthernet0/17':150 }
                
def generate_access_config(access):
#Функция, герерирующая конфигурацию для access-портов"""
    
    #Шаблон команд
    access_template = ['switchport mode access',
                       'switchport access vlan',
                       'switchport nonegotiate',
                       'spanning-tree portfast',
                       'spanning-tree bpduguard enable']  
    
    #Генерируем список команд для каждого интерфейса
    for int in access.keys():
        print int
        for command in access_template:
            
            #Подставляем номер VLAN в команду switchport access vlan
            if command.endswith('access vlan'):
                print ' %s %s' % (command, access[int])
            
            #Печатаем остальное
            else:
                print ' %s' % command        

#Проверяем, что функция работает                
generate_access_config(access_dict)
            
"""Задание 7.1a
Сделать копию скрипта задания 7.1.
Дополнить скрипт:
ввести дополнительный параметр, который контролирует будет ли настроен port-security
имя параметра 'psecurity'
по умолчанию значение False
Проверить работу функции на примере словаря access_dict, с генерацией конфигурации port-security и без.
"""                

#Создаем словарь с аргументами            
access_dict = { 'FastEthernet0/12':10,
                'FastEthernet0/14':11,
                'FastEthernet0/16':17,
                'FastEthernet0/17':150 }
                
def generate_access_config(access, psecurity = True):
#Функция, герерирующая конфигурацию для access-портов"""
    
    #Шаблоны команд
    access_template = ['switchport mode access',
                       'switchport access vlan',
                       'switchport nonegotiate',
                       'spanning-tree portfast',
                       'spanning-tree bpduguard enable']  
    
    port_security = ['switchport port-security maximum 2',
                     'switchport port-security violation restrict',
                     'switchport port-security']
    
    #Генерируем список команд для каждого интерфейса
    for int in access.keys():
        print int
        for command in access_template:
            
            #Подставляем номер VLAN в команду switchport access vlan
            if command.endswith('access vlan'):
                print ' %s %s' % (command, access[int])
            
            #Печатаем остальное
            else:
                print ' %s' % command    

        #Проверяем аргумент psecurity и, если он true, то генерируем конфиг
        if psecurity == True:    
            for command in port_security:    
                print ' %s' % command    
                
#Проверяем, что функция работает                
generate_access_config(access_dict)

"""Задание 7.1b
Сделать копию скрипта задания 7.1a.
Изменить скрипт таким образом, чтобы функция возвращала не список команд, а словарь:
ключи: имена интерфейсов, вида 'FastEthernet0/12'
значения: список команд, который надо выполнить на этом интерфейсе:
    ['switchport mode access',
     'switchport access vlan 10',
     'switchport nonegotiate',
     'spanning-tree portfast',
     'spanning-tree bpduguard enable']
Проверить работу функции на примере словаря access_dict, с генерацией конфигурации port-security и без.
"""

#Создаем словарь с аргументами            
access_dict = { 'FastEthernet0/12':10,
                'FastEthernet0/14':11,
                'FastEthernet0/16':17,
                'FastEthernet0/17':150 }

def generate_access_config(access, psecurity = True):
#Функция, герерирующая конфигурацию для access-портов"""

    #Шаблоны команд
    access_template = ['switchport mode access',
                       'switchport access vlan',
                       'switchport nonegotiate',
                       'spanning-tree portfast',
                       'spanning-tree bpduguard enable']  

    port_security = ['switchport port-security maximum 2',
                     'switchport port-security violation restrict',
                     'switchport port-security']

    #Два пустых списка для заполнения keys и values будущего словаря
    interfaces = []
    commands = []

    #Генерируем список команд для каждого интерфейса
    for idx, int in enumerate(access.keys()):

        #Создаем ключи
        interfaces.append(int)
        
        #Создаем пустые значения для последующего заполнения
        commands.append([])
        
        for command in access_template:
       
           #Подставляем номер VLAN в команду switchport access vlan
            if command.endswith('access vlan'):
                commands[idx].append(command + ' ' + str(access[int]))
           #Добавляем остальное
            else:
                commands[idx].append(command) 
       
        #Проверяем аргумент psecurity и, если он true, то добавлям секьюрность
        if psecurity == True:    
            for command in port_security:
                commands[idx].append(command)
    
    #Возвращаем словарь
    return dict(zip(interfaces,commands))
     
#Проверяем, что функция работает                
generate_access_config(access_dict)

_______________________________________________________________________________________________________________

"""Задание 7.2
Создать функцию, которая генерирует конфигурацию для trunk-портов.
Параметр trunk - это словарь trunk-портов.
Словарь trunk имеет такой формат (тестовый словарь trunk_dict уже создан):
{ 'FastEthernet0/1':[10,20],
  'FastEthernet0/2':[11,30],
  'FastEthernet0/4':[17] }
Функция должна возвращать список команд с конфигурацией на основе указанных портов и шаблона trunk_template.
В конце строк в списке не должно быть символа перевода строки.
Проверить работу функции на примере словаря trunk_dict.
def generate_trunk_config(trunk):
    trunk - словарь trunk-портов для которых необходимо сгенерировать конфигурацию.
    Возвращает список всех команд, которые были сгенерированы на основе шаблона
    trunk_template = ['switchport trunk encapsulation dot1q',
                      'switchport mode trunk',
                      'switchport trunk native vlan 999',
                      'switchport trunk allowed vlan']
trunk_dict = { 'FastEthernet0/1':[10,20,30],
               'FastEthernet0/2':[11,30],
               'FastEthernet0/4':[17] }
"""

#Создаем словарь с аргументами            
trunk_dict = { 'FastEthernet0/1':[10,20,30],
               'FastEthernet0/2':[11,30],
               'FastEthernet0/4':[17] }
               
def generate_trunk_config(trunk):
    """
    trunk - словарь trunk-портов для которых необходимо сгенерировать конфигурацию.

    Возвращает список всех команд, которые были сгенерированы на основе шаблона
    """
    trunk_template = ['switchport trunk encapsulation dot1q',
                      'switchport mode trunk',
                      'switchport trunk native vlan 999',
                      'switchport trunk allowed vlan']

#Создаем словарь с аргументами            
trunk_dict = { 'FastEthernet0/1':[10,20,30],
               'FastEthernet0/2':[11,30],
               'FastEthernet0/4':[17] }
               
def generate_trunk_config(trunk):
    """
    trunk - словарь trunk-портов для которых необходимо сгенерировать конфигурацию.

    Возвращает список всех команд, которые были сгенерированы на основе шаблона
    """
    trunk_template = ['switchport trunk encapsulation dot1q',
                      'switchport mode trunk',
                      'switchport trunk native vlan 999',
                      'switchport trunk allowed vlan']

    #Генерируем список команд для каждого интерфейса
    for int in trunk.keys():
        
        #Указываем интерфейс
        print int,
        
        for command in trunk_template:
       
           #Подставляем номер VLAN в команду switchport trunk allowed vlan
            if command.endswith('allowed vlan'):
                print ' %s %s' % (command, ', '.join(str(i) for i in trunk[int])),
           #Добавляем остальное
            else:
                print ' %s ' % (command),
     
#Проверяем, что функция работает                
generate_trunk_config(trunk_dict)

"""Задание 7.2a
Сделать копию скрипта задания 7.2
Изменить скрипт таким образом, чтобы функция возвращала не список команд, а словарь:
    ключи: имена интерфейсов, вида 'FastEthernet0/1'
    значения: список команд, который надо выполнить на этом интерфейсе
Проверить работу функции на примере словаря trunk_dict.
"""

#Создаем словарь с аргументами            
trunk_dict = { 'FastEthernet0/1':[10,20,30],
               'FastEthernet0/2':[11,30],
               'FastEthernet0/4':[17] }
               
def generate_trunk_config(trunk):
    """
    trunk - словарь trunk-портов для которых необходимо сгенерировать конфигурацию.

    Возвращает список всех команд, которые были сгенерированы на основе шаблона
    """
    trunk_template = ['switchport trunk encapsulation dot1q',
                      'switchport mode trunk',
                      'switchport trunk native vlan 999',
                      'switchport trunk allowed vlan']

    #Два пустых списка для заполнения keys и values будущего словаря
    interfaces = []
    commands = []                  
                      
    #Генерируем список команд для каждого интерфейса
    for idx, int in enumerate(trunk.keys()):
        
        #Создаем ключи
        interfaces.append(int)
        
        #Создаем пустые значения для последующего заполнения
        commands.append([])
        
        for command in trunk_template:
       
           #Подставляем номер VLAN в команду switchport trunk allowed vlan
            if command.endswith('allowed vlan'):
                commands[idx].append(command + ' ' + ', '.join(str(i) for i in trunk[int]))
           #Добавляем остальное
            else:
                commands[idx].append(command)
                
    #Возвращаем словарь
    return dict(zip(interfaces,commands))
        
#Проверяем, что функция работает                
generate_trunk_config(trunk_dict)

_______________________________________________________________________________________________________________

"""Задание 7.3
Создать функцию get_int_vlan_map, которая обрабатывает конфигурационный файл коммутатора и возвращает два объекта:
    словарь портов в режиме access, где ключи номера портов, а значения access VLAN:
{'FastEthernet0/12':10,
 'FastEthernet0/14':11,
 'FastEthernet0/16':17}
    словарь портов в режиме trunk, где ключи номера портов, а значения список разрешенных VLAN:
 {'FastEthernet0/1':[10,20],
  'FastEthernet0/2':[11,30],
  'FastEthernet0/4':[17]}
Функция ожидает в качестве аргумента имя конфигурационного файла.
Проверить работу функции на примере файла config_sw1.txt
"""

def get_int_vlan_map(cfgfile):
    """
    Функция get_int_vlan_map, которая обрабатывает конфигурационный файл коммутатора и возвращает два словаря, которые содержат
    порты и их конфигурацию для режима Access и Trunk.
    """
    
    #Определяем переменные
    config_interface = False
    interfaces_access = []
    interfaces_trunk = []
    vlan_access = []
    vlan_trunk = []
    
    #Открываем файл построчно
    with open(cfgfile) as f:
        for line in f:
        
            #Вырезаем ненужные переводы строк
            line = line.replace('\n','')
            
            """Если строка начинается со слова interface (исключая interface Vlan), то
            сохраняем имя интерфейса как временное значение. Все строки после interface
            считаем частью нужного конфига, все остальное - мусор.
            """
            if line.startswith('interface') and not 'Vlan' in line:
                temp_interface = line.replace('interface ','')
                config_interface = True
                continue
            elif line.startswith('!'):
                config_interface = False
    
            #Если строка является частью нужного конфига, то обрабатываем ее
            if config_interface:
                
                #Вырезаем список vlan из интерфейсов в режиме access
                if 'access vlan' in line:
                    interfaces_access.append(temp_interface)
                    vlan_access.append(int(line.replace(' switchport access vlan ','')))
                #Вырезаем список vlan из интерфейсов в режиме trunk
                elif 'trunk allowed vlan' in line:
                    interfaces_trunk.append(temp_interface)
                    vlan_trunk.append([int(vlan) for vlan in line.replace(' switchport trunk allowed vlan ','').split(',')])
                    
    return dict(zip(interfaces_access,vlan_access)), dict(zip(interfaces_trunk,vlan_trunk))

#Проверяем, что функция работает 
get_int_vlan_map('C:/Users/kingnothinq/Desktop/exercises/07_functions/config_sw1.txt')

"""Задание 7.3a
Сделать копию скрипта задания 7.3.
Дополнить скрипт:
    добавить поддержку конфигурации, когда настройка access-порта выглядит так:
interface FastEthernet0/20
  switchport mode access
  duplex auto
То есть, порт находится в VLAN 1
В таком случае, в словарь портов должна добавляться информация, что порт в VLAN 1
Пример словаря:
{'FastEthernet0/12':10,
 'FastEthernet0/14':11,
 'FastEthernet0/20':1 }
Функция ожидает в качестве аргумента имя конфигурационного файла.
Проверить работу функции на примере файла config_sw2.txt
"""

def get_int_vlan_map(cfgfile):
    """
    Функция get_int_vlan_map, которая обрабатывает конфигурационный файл коммутатора и возвращает два словаря, которые содержат
    порты и их конфигурацию для режима Access и Trunk.
    """
    
    #Определяем переменные
    config_interface = False
    interfaces_access = []
    interfaces_trunk = []
    vlan_access = []
    vlan_trunk = []
    
    #Открываем файл построчно
    with open(cfgfile) as f:
        for line in f:
        
            #Вырезаем ненужные переводы строк
            line = line.replace('\n','')
            
            """Если строка начинается со слова interface (исключая interface Vlan), то
            сохраняем имя интерфейса как временное значение. Все строки, после interface
            считаем частью нужного конфига, все остальное - мусор.
            """
            if line.startswith('interface') and not 'Vlan' in line:
                temp_interface = line.replace('interface ','')
                config_interface = True
                continue
            elif line.startswith('!'):
                config_interface = False
    
            #Если строка является частью нужного конфига, то обрабатываем ее
            if config_interface:
                
                #Вырезаем список vlan из интерфейсов в режиме access
                if 'access vlan' in line:
                    interfaces_access.append(temp_interface)
                    vlan_access.append(int(line.replace(' switchport access vlan ','')))
                #Вырезаем список vlan из интерфейсов в режиме trunk
                elif 'trunk allowed vlan' in line:
                    interfaces_trunk.append(temp_interface)
                    vlan_trunk.append([int(vlan) for vlan in line.replace(' switchport trunk allowed vlan ','').split(',')])
                elif 'switchport mode access' in line:
                    interfaces_access.append(temp_interface)
                    vlan_access.append(1)
    
    return dict(zip(interfaces_access,vlan_access)), dict(zip(interfaces_trunk,vlan_trunk))

#Проверяем, что функция работает 
get_int_vlan_map('C:/Users/kingnothinq/Desktop/exercises/07_functions/config_sw2.txt')  
_______________________________________________________________________________________________________________

"""Задание 7.4
Создать функцию, которая обрабатывает конфигурационный файл коммутатора и возвращает словарь:
    Все команды верхнего уровня (глобального режима конфигурации), будут ключами.
    Если у команды верхнего уровня есть подкоманды, они должны быть в значении у соответствующего ключа, в виде списка (пробелы вначале можно оставлять).
    Если у команды верхнего уровня нет подкоманд, то значение будет пустым списком
Функция ожидает в качестве аргумента имя конфигурационного файла.
Проверить работу функции на примере файла config_sw1.txt
При обработке конфигурационного файла, надо игнорировать строки, которые начинаются с '!', а также строки в которых содержатся слова из списка ignore.
Для проверки надо ли игнорировать строку, использовать функцию ignore_command.
ignore = ['duplex', 'alias', 'Current configuration']
def ignore_command(command, ignore):
    Функция проверяет содержится ли в команде слово из списка ignore.
    command - строка. Команда, которую надо проверить
    ignore - список. Список слов
    Возвращает True, если в команде содержится слово из списка ignore, False - если нет
    ignore_command = False
    for word in ignore:
        if word in command:
            return True
    return ignore_command
def config_to_dict(config):
    config - имя конфигурационного файла коммутатора
    Возвращает словарь:
    - Все команды верхнего уровня (глобального режима конфигурации), будут ключами.
    - Если у команды верхнего уровня есть подкоманды,
      они должны быть в значении у соответствующего ключа, в виде списка (пробелы вначале можно оставлять).
    - Если у команды верхнего уровня нет подкоманд, то значение будет пустым списком
"""


ignore = ['duplex', 'alias', 'Current configuration']

def ignore_command(command, ignore):
    """
    Функция проверяет содержится ли в команде слово из списка ignore.

    command - строка. Команда, которую надо проверить
    ignore - список. Список слов

    Возвращает True, если в команде содержится слово из списка ignore, False - если нет
    """
    ignore_command = False

    for word in ignore:
        if word in command:
            return True
    return ignore_command


def config_to_dict(config):
    """
    config - имя конфигурационного файла коммутатора

    Возвращает словарь:
    - Все команды верхнего уровня (глобального режима конфигурации), будут ключами.
    - Если у команды верхнего уровня есть подкоманды,
      они должны быть в значении у соответствующего ключа, в виде списка (пробелы вначале можно оставлять).
    - Если у команды верхнего уровня нет подкоманд, то значение будет пустым списком
    """
    
    result = {}
    first_level_command = []
    second_level_command = []
    temp_second_level_command = []
    first_level_check = False
    first_level_id = 0
    second_level_id = 0
    
    #Открываем файл построчно
    with open(config) as f:            
        for line in f:            
                    
            #Вырезаем ненужные переводы строк            
            line = line.replace('\n','')
            
            #Last configuration change не имеет команды верхнего уровня, но попадает в список команд нижнего уровня, т.к. начинается с пробела
            if line.startswith('!'):
                continue
            elif ignore_command(line,ignore):
                continue
            
            for symbol in line:
                if symbol.isalnum():                  
                    first_level_check = True
                    first_level_id = first_level_id + 1
                    break
                else:
                    first_level_check = False
                    second_level_id = first_level_id
                    break                    
                        
            if first_level_check:
                first_level_command.append(line)
                second_level_command.append(temp_second_level_command)
                temp_second_level_command = []
                temp_second_level_command.append([])
                print first_level_id,
                print line
            else:
                temp_second_level_command.append(line)
                print second_level_id,
                print line
    
    
    #for key, value in zip(first_level_command, second_level_command):
    #    result[key] = value
    #
    #return dict(zip(first_level_command, second_level_command))

json.dumps(config_to_dict('C:/Users/kingnothinq/Desktop/exercises/07_functions/config_sw1.txt'), indent=4, sort_keys=True)


